let $GIT_SSL_NO_VERIFY = 'true'
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'	" required

" Plugin 'Twinside/vim-haskellConceal'
" Plugin 'davidhalter/jedi-vim'
" Plugin 'nvie/vim-flake8'
" Plugin 'bitc/vim-hdevtools'
" Plugin 'phildawes/racer'
" Plugin 'scrooloose/syntastic'
" Plugin 'ujihisa/neco-ghc'

Plugin 'NLKNguyen/papercolor-theme'
Plugin 'Shougo/neocomplcache'
Plugin 'Shougo/vimproc'
Plugin 'altercation/vim-colors-solarized'
Plugin 'alx741/vim-hindent'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'exu/pgsql.vim'
Plugin 'godlygeek/tabular'
Plugin 'junegunn/seoul256.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
Plugin 'ludovicchabant/vim-lawrencium'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'morhetz/gruvbox'
Plugin 'nelstrom/vim-subrip'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'pbrisbin/vim-syntax-shakespeare'
Plugin 'raichoo/purescript-vim'
Plugin 'rking/ag.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tikhomirov/vim-glsl'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-characterize'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-liquid'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-pathogen'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-scripts/proton'
Plugin 'vim-scripts/pyte'
Plugin 'vim-scripts/saturn.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'w0rp/ale'

call vundle#end()

" Basic Settings
"set autoread
set background=dark
set backspace=indent,eol,start
set cursorline
set encoding=utf-8
set hidden
set history=50		" keep 50 lines of command line history
set hlsearch
set incsearch		" do incremental searching
set laststatus=2
set listchars=trail:␣,tab:›\ ,extends:>,precedes:<,nbsp:·
"set listchars=tab:»·,trail:·,precedes:<,extends:>,eol:¶
set modeline
set modelines=5
set mouse=a
set nobackup		" do not keep a backup file, use versions instead
set nowrap
set number
set ruler		" show the cursor position all the time
set scrolloff=3
set showcmd		" display incomplete commands
set showmatch
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set wildmenu
set wildignore+=*/.hg,*/.git,*/.svn
set wildignore+=*.sw?
set wildignore+=.DS_Store
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.hi,*.dyn_o,*.dyn_hi
set wildignore+=*/dist

let c_space_errors=1
let python_highlight_all=1

syntax on
filetype plugin indent on

if &term == "xterm-256color"
  set termguicolors
endif

" Colorscheme
colorscheme molokai

" CTRL-L redraws & clears search highlight
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

let mapleader="\<Space>"
nnoremap <Leader>f :CtrlP<CR>
nnoremap <Leader>q :CtrlPQuickfix<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <Leader><CR> :CtrlPTag<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>e :Errors<CR>
nnoremap <Leader>r :SyntasticCheck<CR>
vmap <Leader>y "+y
vmap <Leader>d "+d
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>p "+p
nmap <Leader>P "+P

vmap <C-Insert> "+y
nmap <S-Insert> "+p
map! <S-Insert> <C-r>"

nnoremap <Leader>t :NERDTreeToggle<CR>
nnoremap <Leader><Leader> 
" nmap <Leader><Leader> :bn<CR>
" nmap <Leader><BS> :bp<CR>
map <F2> :NERDTreeToggle<CR>
noremap <silent> <F4> :Ag!<CR>

" Airline
if has("gui_running")
  let g:airline_theme="bubblegum"
else
  let g:airline_theme="badwolf"
endif
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#buffer_nr_show = 1

" Ctrl-P
let g:ctrlp_working_path_mode='r'
let g:ctrlp_cmd='CtrlPMixed'
let g:ctrlp_open_new_file='r'
" let g:ghcmod_open_quickfix_function = 'GhcModQuickFixByCtrlP'
" function! GhcModQuickFixByCtrlP()
"   CtrlPQuickfix
" endfunction

" Completion
" let g:neocomplcache_enable_insert_char_pre = 1
let g:neocomplcache_enable_at_startup=1
let g:necoghc_enable_detailed_browse=1

" Tabs
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

" Tags
let g:tagbar_iconchars = ['▶', '▼']

" netrw
let g:netrw_list_cmd="ssh -q USEPORT HOSTNAME ls -Fa"

" haskell
let g:hindent_on_save = 0
let g:no_haskell_conceal = 1
let g:haskell_indent_disable = 1

" ALE
let g:airline#extensions#ale#enabled = 1
let g:ale_change_sign_column_color = 0
let g:ale_completion_enabled = 0
let g:ale_echo_msg_format = "%linter%: %s"
"let g:ale_linters = {'haskell': ['stack-ghc-mod', 'stack-build', 'stack-ghc']}
let g:ale_linters = {'haskell': ['stack-ghc-mod', 'hlint']}
"let g:ale_linters = {'haskell': ['hdevtools', 'hlint']}
let g:ale_sign_error = "E▶"
let g:ale_sign_style_error = "E▷"
let g:ale_sign_warning = "w▶"
let g:ale_sign_style_warning = "w▷"
let g:ale_sign_info = "i▶"

" Syntastic
" let g:airline#extensions#syntastic#enabled = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 2
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_enable_signs=1
" let g:syntastic_error_symbol="E▶"
" let g:syntastic_style_error_symbol="E▷"
" let g:syntastic_warning_symbol="w▶"
" let g:syntastic_style_warning_symbol="w▷"
" highlight! link SyntasticWarningSign Comment
" highlight! link SyntasticErrorSign Statement
" highlight! link SignColumn String

" ghcmod and hdevtools
" let g:syntastic_haskell_checkers = ['hdevtools', 'hlint']
" let g:syntastic_haskell_hdevtools_args = '-g-Wall'

" liquid
" let g:pandoc_use_embeds_in_codeblocks_for_langs = ['haskell', 'ruby', 'vim', 'python', 'r', 'json', 'c']
let g:pandoc_use_embeds_in_codeblocks_for_langs = ['haskell', 'python', 'c']

" NERDTree
let NERDTreeIgnore=['\~$']
let NERDTreeRespectWildIgnore=1

" racer
"let g:racer_cmd = "<path-to-racer>/target/release/racer"
"let $RUST_SRC_PATH="<path-to-rust-srcdir>/src/"
