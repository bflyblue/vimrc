set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

if has('nvim')
  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': './install.sh' }

  " (Optional) Multi-entry selection UI.
  Plug 'junegunn/fzf'
  " (Completion plugin option 1)
  Plug 'ncm2/ncm2'
  Plug 'roxma/nvim-yarp'
  " (Completion plugin option 2)
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  " Plug 'natebosch/vim-lsc'
  " Plug 'Shougo/neocomplcache'
  " Plug 'Shougo/vimproc'
  " Plug 'eagletmt/ghcmod-vim'
  Plug 'w0rp/ale'
endif

" Plug 'Floobits/floobits-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'alx741/vim-hindent'
Plug 'anekos/hledger-vim'
Plug 'exu/pgsql.vim'
Plug 'godlygeek/tabular'
Plug 'junegunn/seoul256.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'kien/ctrlp.vim'
Plug 'ludovicchabant/vim-lawrencium'
Plug 'majutsushi/tagbar'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'morhetz/gruvbox'
" Plug 'mpickering/hlint-refactor-vim'
Plug 'nelstrom/vim-subrip'
Plug 'neovimhaskell/haskell-vim'
Plug 'pbrisbin/vim-syntax-shakespeare'
Plug 'raichoo/purescript-vim'
Plug 'rking/ag.vim'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdtree'
Plug 'tikhomirov/vim-glsl'
Plug 'tomasr/molokai'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-pathogen'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-scripts/proton'
Plug 'vim-scripts/pyte'
Plug 'vim-scripts/saturn.vim'
Plug 'vim-scripts/taglist.vim'

call plug#end()

" Basic Settings
"set autoread
set background=dark
set backspace=indent,eol,start
set cursorline
set encoding=utf-8
set hidden
set history=50		" keep 50 lines of command line history
set hlsearch
set incsearch		" do incremental searching
set laststatus=2
set listchars=trail:‚ê£,tab:‚Ä∫\ ,extends:>,precedes:<,nbsp:¬∑
"set listchars=tab:¬ª¬∑,trail:¬∑,precedes:<,extends:>,eol:¬∂
set modeline
set modelines=5
set mouse=a
set nobackup		" do not keep a backup file, use versions instead
set nowrap
set number
set ruler		" show the cursor position all the time
set scrolloff=3
set showcmd		" display incomplete commands
set showmatch
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set updatetime=20
set wildmenu
set wildignore+=*/.hg,*/.git,*/.svn
set wildignore+=*.sw?
set wildignore+=.DS_Store
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.hi,*.dyn_o,*.dyn_hi
set wildignore+=*/dist

let c_space_errors=1
let python_highlight_all=1

syntax on
filetype plugin indent on

if has('nvim')
  set termguicolors
else
  if &term ==? "xterm-256color"
    set termguicolors
  elseif &term ==? "st-256color"
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Colorscheme
colorscheme molokai

" CTRL-L redraws & clears search highlight
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

let mapleader="\<Space>"
let maplocalleader=","

nnoremap <Leader>f :CtrlP<CR>
nnoremap <Leader>q :CtrlPQuickfix<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <Leader><CR> :CtrlPTag<CR>
nnoremap <Leader>w :w<CR>
" nnoremap <Leader>e :Errors<CR>
" nnoremap <Leader>r :SyntasticCheck<CR>
vmap <Leader>y "+y
vmap <Leader>d "+d
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>p "+p
nmap <Leader>P "+P

vmap <C-Insert> "+y
nmap <S-Insert> "+p
map! <S-Insert> <C-r>"

nnoremap <Leader>t :NERDTreeToggle<CR>
nnoremap <Leader><Leader> 
" nmap <Leader><Leader> :bn<CR>
" nmap <Leader><BS> :bp<CR>
map <F2> :NERDTreeToggle<CR>
noremap <silent> <F4> :LAg!<CR>

" Ag
let g:ag_working_path_mode='r'
let g:ag_highlight=1

" Airline
if has("gui_running")
  let g:airline_theme="bubblegum"
else
  let g:airline_theme="badwolf"
endif
" let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.linenr = '‚ê§'
" let g:airline_symbols.linenr = '¬∂'
" let g:airline_symbols.maxlinenr = 'ÓÇ°'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '…Ü'
let g:airline_symbols.whitespace = 'Œû'

" Ctrl-P
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_open_new_file='r'

" Completion
if !has('nvim')
  " let g:neocomplcache_enable_insert_char_pre = 1
  let g:neocomplcache_enable_at_startup=1
  let g:necoghc_enable_detailed_browse=1
endif

" Tabs
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

" Tags
let g:tagbar_iconchars = ['‚ñ∂', '‚ñº']

" netrw
let g:netrw_list_cmd="ssh -q USEPORT HOSTNAME ls -Fa"

" haskell
let g:hindent_on_save = 0
let g:no_haskell_conceal = 1
let g:haskell_indent_disable = 1

" LanguageClient
if has('nvim')
    " \ 'haskell': ['stack', 'exec', '--', '/home/shaun/.nix-profile/bin/hie', '--lsp']
  let g:LanguageClient_serverCommands = {
    \ 'haskell': ['hie-wrapper', '--lsp']
    \ }
  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_autoStop = 1
  " let g:LanguageClient_changeThrottle = 1
  let g:LanguageClient_waitOutputTimeout = 120
  " let g:LanguageClient_setLoggingLevel = 'INFO'
  " set completefunc=LanguageClient#complete
  " let g:deoplete#enable_at_startup = 1
  let g:LanguageClient_diagnosticsDisplay =
  \ {
  \     1: {
  \         "name": "Error",
  \         "texthl": "ALEError",
  \         "signText": "‚úñ",
  \         "signTexthl": "ALEErrorSign",
  \         "virtualTexthl": "ALEErrorSign",
  \     },
  \     2: {
  \         "name": "Warning",
  \         "texthl": "ALEWarning",
  \         "signText": "‚ö†",
  \         "signTexthl": "ALEWarningSign",
  \         "virtualTexthl": "ALEWarningSign",
  \     },
  \     3: {
  \         "name": "Information",
  \         "texthl": "ALEInfo",
  \         "signText": "‚Ñπ",
  \         "signTexthl": "ALEInfoSign",
  \         "virtualTexthl": "ALEInfoSign",
  \     },
  \     4: {
  \         "name": "Hint",
  \         "texthl": "ALEInfo",
  \         "signText": "‚û§",
  \         "signTexthl": "ALEInfoSign",
  \         "virtualTexthl": "ALEInfoSign",
  \     },
  \ }
  highlight! link ALEErrorSign DiffDelete
  highlight! link ALEWarningSign DiffAdd
  highlight! link ALEInfoSign DiffChange

  " enable ncm2 for all buffers
  autocmd BufEnter * call ncm2#enable_for_buffer()
  set completeopt=noinsert,menuone,noselect

  augroup LanguageClient_config
    autocmd!
    autocmd User LanguageClientStarted setlocal signcolumn=yes
    autocmd User LanguageClientStopped setlocal signcolumn=auto
  augroup END

  function LC_maps()
    if has_key(g:LanguageClient_serverCommands, &filetype)
      set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()
      nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
      nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>
      " nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
      nnoremap <buffer> <silent> <Leader>s :call LanguageClient#textDocument_documentSymbol()<CR>
      nnoremap <buffer> <silent> <Leader>Q :call LanguageClient#textDocument_formatting()<CR>
      nnoremap <buffer> <silent> <Leader>A :call LanguageClient#textDocument_codeAction()<CR>
    endif
  endfunction
  
  autocmd FileType * call LC_maps()
endif

" ALE
if !has('nvim')
  let g:lsc_server_commands = {'haskell': 'hie --lsp'}
  let g:lsc_trace_level = 'messages'
  let g:airline#extensions#ale#enabled = 1
  let g:ale_lint_on_text_changed = "never"
  let g:ale_open_list = 0
  let g:ale_change_sign_column_color = 0
  let g:ale_completion_enabled = 0
  let g:ale_echo_msg_format = "%linter%: %s"
  let g:ale_linters = {'haskell': []}
  "let g:ale_linters = {'haskell': ['stack-build', 'hlint']}
  "let g:ale_linters = {'haskell': ['stack-ghc', 'hlint']}
  "let g:ale_linters = {'haskell': ['stack-ghc-mod', 'hlint']}
  "let g:ale_linters = {'haskell': ['hdevtools', 'hlint']}
  let g:ale_sign_error = "E‚ñ∂"
  let g:ale_sign_style_error = "E‚ñ∑"
  let g:ale_sign_warning = "w‚ñ∂"
  let g:ale_sign_style_warning = "w‚ñ∑"
  let g:ale_sign_info = "i‚ñ∂"
endif

" Syntastic
" let g:airline#extensions#syntastic#enabled = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 2
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_enable_signs=1
" let g:syntastic_error_symbol="E‚ñ∂"
" let g:syntastic_style_error_symbol="E‚ñ∑"
" let g:syntastic_warning_symbol="w‚ñ∂"
" let g:syntastic_style_warning_symbol="w‚ñ∑"
" highlight! link SyntasticWarningSign Comment
" highlight! link SyntasticErrorSign Statement
" highlight! link SignColumn String

" ghcmod and hdevtools
" let g:syntastic_haskell_checkers = ['hdevtools', 'hlint']
" let g:syntastic_haskell_hdevtools_args = '-g-Wall'

" liquid
" let g:pandoc_use_embeds_in_codeblocks_for_langs = ['haskell', 'ruby', 'vim', 'python', 'r', 'json', 'c']
let g:pandoc_use_embeds_in_codeblocks_for_langs = ['haskell', 'python', 'c']

" NERDTree
let NERDTreeIgnore=['\~$']
let NERDTreeRespectWildIgnore=1

" racer
"let g:racer_cmd = "<path-to-racer>/target/release/racer"
"let $RUST_SRC_PATH="<path-to-rust-srcdir>/src/"
